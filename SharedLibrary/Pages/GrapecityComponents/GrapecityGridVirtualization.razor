@page "/grapecity-grid-virtualization"

@using Data
@using C1.Blazor.Grid
@using C1.DataCollection

@inject Database db

<FlexGrid ItemsSource="gridData" AutoGenerateColumns="false" DefaultColumnWidth="C1.Blazor.Grid.GridLength.Star"
    IsVirtualizationEnabled="true" AllowSorting="true" Style="@(" max-height:480px")"
    AllowDragging="C1.Blazor.Grid.GridAllowDragging.None">
    <FlexGridColumns>
        <C1.Blazor.Grid.GridColumn Binding="RowNumber" Header="Row Number" />
        <C1.Blazor.Grid.GridColumn Binding="Id" Header="Id" />
        <C1.Blazor.Grid.GridColumn Binding="PostId" Header="Post Id" />
        <C1.Blazor.Grid.GridColumn Binding="Name" Header="Name" />
        <C1.Blazor.Grid.GridColumn Binding="Email" Header="Email" />
    </FlexGridColumns>
</FlexGrid>

@code {

    C1VirtualDataCollection<Comment> gridData;

    protected override async Task OnInitializedAsync()
    {
        var data = db.Repeat(2000, (await db.GetData()).Comments);
        gridData = new VirtualModeDataCollection(data);
        gridData.PageSize = 15;
    }

    public class VirtualModeDataCollection : C1VirtualDataCollection<Comment>
    {
        readonly List<Comment> data;

        public VirtualModeDataCollection(List<Comment> data)
        {
            this.data = data;
        }

        protected override async Task<Tuple<int, IReadOnlyList<Comment>>> GetPageAsync(int pageIndex, int startingIndex, int count, IReadOnlyList<SortDescription> sortDescriptions = null,
            FilterExpression filterExpression = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            //await Task.Delay(500, cancellationToken);//Simulates network traffic.
            
            var res = data.Skip(pageIndex * count).Take(count).ToList();
            
            return new Tuple<int, IReadOnlyList<Comment>>(data.Count, res);
        }
    }
}